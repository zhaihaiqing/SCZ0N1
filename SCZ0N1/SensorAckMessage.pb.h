/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.3 */

#ifndef PB_SENSORMESSAGES_SENSORACKMESSAGE_PB_H_INCLUDED
#define PB_SENSORMESSAGES_SENSORACKMESSAGE_PB_H_INCLUDED
#include "pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _SensorMessages_SensorAckMessage_ErrCode {
    SensorMessages_SensorAckMessage_ErrCode_CODE_SUCCESS = 0,
    SensorMessages_SensorAckMessage_ErrCode_CODE_FAIL = 1,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ESIZE = 2,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ECANCEL = 3,
    SensorMessages_SensorAckMessage_ErrCode_CODE_EOFF = 4,
    SensorMessages_SensorAckMessage_ErrCode_CODE_EBUSY = 5,
    SensorMessages_SensorAckMessage_ErrCode_CODE_EINVAL = 6,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ERETRY = 7,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ERSERVE = 8,
    SensorMessages_SensorAckMessage_ErrCode_CODE_EALREADY = 9,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ENOMEM = 10,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ENOACK = 11,
    SensorMessages_SensorAckMessage_ErrCode_CODE_TIME_OUT = 16,
    SensorMessages_SensorAckMessage_ErrCode_CODE_UNCONNECT_ROUTER = 17,
    SensorMessages_SensorAckMessage_ErrCode_CODE_INVAL_MESSAGE = 18,
    SensorMessages_SensorAckMessage_ErrCode_CODE_DEVICE_BUSY = 19,
    SensorMessages_SensorAckMessage_ErrCode_CODE_EMPTY_ERR = 20,
    SensorMessages_SensorAckMessage_ErrCode_CODE_ADD_NODE_FAIL = 21,
    SensorMessages_SensorAckMessage_ErrCode_CODE_EMPTY_INS_ERR = 22,
    SensorMessages_SensorAckMessage_ErrCode_CODE_LACK_ANYONE_INS_ERR = 23,
    SensorMessages_SensorAckMessage_ErrCode_CODE_NULL_INS_ERR = 24,
    SensorMessages_SensorAckMessage_ErrCode_CODE_NONE_NODE_ERR = 25,
    SensorMessages_SensorAckMessage_ErrCode_CODE_NONE_TYPE_ERR = 26,
    SensorMessages_SensorAckMessage_ErrCode_CODE_INS_TOO_LONG_ERR = 27,
    SensorMessages_SensorAckMessage_ErrCode_CODE_LACK_MEM_ERR = 28,
    SensorMessages_SensorAckMessage_ErrCode_CODE_GET_INFO_FAIL = 29,
    SensorMessages_SensorAckMessage_ErrCode_CODE_SERVER_RESPONSE_ERR = 101
} SensorMessages_SensorAckMessage_ErrCode;

/* Struct definitions */
typedef struct _SensorMessages_SensorAckMessage {
    char instruction_name[40];
    char packet_name[40];
    char gateway_id[16];
    int32_t node_id;
    uint32_t unix_time;
    SensorMessages_SensorAckMessage_ErrCode err_code;
    char instruction_id[25];
} SensorMessages_SensorAckMessage;


/* Helper constants for enums */
#define _SensorMessages_SensorAckMessage_ErrCode_MIN SensorMessages_SensorAckMessage_ErrCode_CODE_SUCCESS
#define _SensorMessages_SensorAckMessage_ErrCode_MAX SensorMessages_SensorAckMessage_ErrCode_CODE_SERVER_RESPONSE_ERR
#define _SensorMessages_SensorAckMessage_ErrCode_ARRAYSIZE ((SensorMessages_SensorAckMessage_ErrCode)(SensorMessages_SensorAckMessage_ErrCode_CODE_SERVER_RESPONSE_ERR+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SensorMessages_SensorAckMessage_init_default {"", "", "", 0, 0, _SensorMessages_SensorAckMessage_ErrCode_MIN, ""}
#define SensorMessages_SensorAckMessage_init_zero {"", "", "", 0, 0, _SensorMessages_SensorAckMessage_ErrCode_MIN, ""}

/* Field tags (for use in manual encoding/decoding) */
#define SensorMessages_SensorAckMessage_instruction_name_tag 1
#define SensorMessages_SensorAckMessage_packet_name_tag 2
#define SensorMessages_SensorAckMessage_gateway_id_tag 3
#define SensorMessages_SensorAckMessage_node_id_tag 4
#define SensorMessages_SensorAckMessage_unix_time_tag 5
#define SensorMessages_SensorAckMessage_err_code_tag 6
#define SensorMessages_SensorAckMessage_instruction_id_tag 8

/* Struct field encoding specification for nanopb */
#define SensorMessages_SensorAckMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   instruction_name,   1) \
X(a, STATIC,   SINGULAR, STRING,   packet_name,       2) \
X(a, STATIC,   SINGULAR, STRING,   gateway_id,        3) \
X(a, STATIC,   SINGULAR, INT32,    node_id,           4) \
X(a, STATIC,   SINGULAR, UINT32,   unix_time,         5) \
X(a, STATIC,   SINGULAR, UENUM,    err_code,          6) \
X(a, STATIC,   SINGULAR, STRING,   instruction_id,    8)
#define SensorMessages_SensorAckMessage_CALLBACK NULL
#define SensorMessages_SensorAckMessage_DEFAULT NULL

extern const pb_msgdesc_t SensorMessages_SensorAckMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SensorMessages_SensorAckMessage_fields &SensorMessages_SensorAckMessage_msg

/* Maximum encoded size of messages (where known) */
#define SensorMessages_SensorAckMessage_size     144

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
